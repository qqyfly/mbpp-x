""" test script for human_eval_x module """

# !/usr/bin/env python
# -*- coding: utf-8 -*-


from data import HUMAN_EVAL_PYTHON, HUMAN_EVAL_SCILAB
from data import read_problems,write_jsonl
from openai import OpenAI
import pandas as pd
import re


def translate_one_test(client, user_content):
    """ Generate code using user promote
    Args:
        client (OpenAI): openai client        
        user_content (string): GPT user content

    Returns:
        string: code generated by GPT
    """
    # System prompt
    system_content = "You are a code translator from python to scilab,return plain code only"
    
    comp = client.chat.completions.create(
       model="gpt-4o-mini",
       store=True,
       messages=[
           {"role": "system", "content": system_content},
           {"role": "user", "content": user_content}
       ]
    )

    code = comp.choices[0].message.content
    # remove ```scilab\n and ``` from the code
    code = code.replace("```scilab\n", "")
    code = code.replace("```", "")
    return code

def translate_one_prompt(client, user_content):
    """ Generate code using user promote and system promote
    Args:
        client (OpenAI): openai client        
        user_content (string): GPT user prompt

    Returns:
        string: code generated by GPT
    """
    
    # System prompt
    system_content = "Translate the following Python function to Scilab exactly as written, \
        preserving all incompleteness, comments, and structure. Do not add any missing code, extra logic, \
        or corrections. If the provided Python function is incomplete (i.e., only the function header and comments), \
        do not add 'endfunction' in the translation. Only translate what is given. Replace Python comment blocks \
        (triple double quotes) with Scilab block comments using /* ... */. Add a newline after the function definition."

    
    comp = client.chat.completions.create(
       model="gpt-4o-mini",
       store=True,
       messages=[
           {"role": "system", "content": system_content},
           {"role": "user", "content": user_content}
       ]
    )

    code = comp.choices[0].message.content

    # remove ```scilab\n and ``` from the code
    code = code.replace("```scilab\n", "")
    code = code.replace("```", "")

    return code

def main():
    """
    Main code to generate code
    """
    #===========================================================================
    # following json file is generated by running github copilot.
    # Read the file content
    #with open('./1.json', 'r') as file:
    #    content = file.read()

    # Find all task id and prompt pairs
    #matches = re.findall(r'TASK=========================================\n(HumanEval/\d+)\nPROMPT=======================================\n(.*?)(?=\nTASK=========================================|\Z)', content, re.DOTALL)

    # Create a DataFrame
    #prompt_df = pd.DataFrame(matches, columns=['taskid', 'prompt'])
    #===========================================================================

    # Create a OpenAI client
    client = OpenAI()

    problems = read_problems(HUMAN_EVAL_PYTHON)

    data = [
        dict(task_id=task_id,
             entry_point=problems[task_id]["entry_point"],
             #prompt=prompt_df[prompt_df['taskid'] == task_id]['prompt'].values[0],
             prompt=translate_one_prompt(client,problems[task_id]["prompt"]),
             test=translate_one_test(client,
                                     re.sub(r'METADATA\s*=\s*{.*?}\s*', '',
                                            problems[task_id]["test"],
                                            flags=re.DOTALL)))
        for task_id in problems
        ]
    write_jsonl(HUMAN_EVAL_SCILAB, data)

if __name__ == "__main__":
    main()
    